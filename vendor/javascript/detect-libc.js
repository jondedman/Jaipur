import s from"os";import r from"child_process";import i from"fs";import e from"process";var t={};var n=e;var o=s.platform();var a=r.spawnSync;var l=i.readdirSync;var d="glibc";var f="musl";var u={encoding:"utf8",env:n.env};a||(a=function(){return{status:126,stdout:"",stderr:""}});function contains(s){return function(r){return-1!==r.indexOf(s)}}function versionFromMuslLdd(s){return s.split(/[\r\n]+/)[1].trim().split(/\s/)[1]}function safeReaddirSync(s){try{return l(s)}catch(s){}return[]}var m="";var c="";var v="";if("linux"===o){var p=a("getconf",["GNU_LIBC_VERSION"],u);if(0===p.status){m=d;c=p.stdout.trim().split(" ")[1];v="getconf"}else{var y=a("ldd",["--version"],u);if(0===y.status&&-1!==y.stdout.indexOf(f)){m=f;c=versionFromMuslLdd(y.stdout);v="ldd"}else if(1===y.status&&-1!==y.stderr.indexOf(f)){m=f;c=versionFromMuslLdd(y.stderr);v="ldd"}else{var L=safeReaddirSync("/lib");if(L.some(contains("-linux-gnu"))){m=d;v="filesystem"}else if(L.some(contains("libc.musl-"))){m=f;v="filesystem"}else if(L.some(contains("ld-musl-"))){m=f;v="filesystem"}else{var x=safeReaddirSync("/usr/sbin");if(x.some(contains("glibc"))){m=d;v="filesystem"}}}}}var S=""!==m&&m!==d;t={GLIBC:d,MUSL:f,family:m,version:c,method:v,isNonGlibcLinux:S};var b=t;const G=t.GLIBC,g=t.MUSL,M=t.family,h=t.version,I=t.method,N=t.isNonGlibcLinux;export default b;export{G as GLIBC,g as MUSL,M as family,N as isNonGlibcLinux,I as method,h as version};

